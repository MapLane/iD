import _uniq from 'lodash-es/uniq';
import { t } from '../util/locale';
import { actionDrawCenterline } from '../actions';
import { behaviorOperation } from '../behavior';
import {geoExtent} from '../geo';

//selectIDS represent the object selected, ways points for example
export function operationDrawCenterline(selectedIDs, context) {
    var multi = (selectedIDs.length === 1 ? 'single' : 'multiple'),
        //???
        extent = selectedIDs.reduce(function(extent, id) {
            return extent.extend(context.entity(id).extent(context.graph()));
        }, geoExtent());

    var entityId = selectedIDs[0],
        entity = context.entity(entityId),
        action = actionDrawCenterline(selectedIDs, context.projection,context);


    var operation = function() {
        context.perform(action, operation.annotation());
    };


    operation.available = function() {
        return selectedIDs.length === 2 && entity.type === 'way';
        return selectedIDs.length === 1 &&
            entity.type === 'way' &&
            _uniq(entity.nodes).length > 1;
    };


    operation.disabled = function() {
        return false;
        var reason;
        if (extent.percentContainedIn(context.extent()) < 0.8) {
            reason = 'too_large';
        } else if (context.hasHiddenConnections(entityId)) {
            reason = 'connected_to_hidden';
        }
        return action.disabled(context.graph()) || reason;
    };

    //The descriptions are generated in the en.json(according to the language selected. en.json locates in iD/dist/locales/en.json)
    //The funciton t finds the message from en.json. The .json is generated by iD/data/core.yaml

    operation.tooltip = function() {
        return t('operations.draw-centerline.description' );
    };


    operation.annotation = function() {
        return t('operations.draw-centerline.annotation' );
    };

    operation.id = 'draw-centerline';     //used to combine the svg. Others are used to the text description
    operation.keys = [t('operations.draw-centerline.key')];
    operation.title = t('operations.draw-centerline.title');
    operation.behavior = behaviorOperation(context).which(operation);

    return operation;
}
